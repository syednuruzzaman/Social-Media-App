{"ast":null,"code":"import React,{useEffect,useState}from'react';import Post from'./Post';import{jsx as _jsx}from\"react/jsx-runtime\";export async function fetchPosts(){// Replace with your actual API call logic\nreturn[{id:1,title:'Author 1',content:'Post content 1'},{id:2,title:'Author 2',content:'Post content 2'}];}const Feed=()=>{const[posts,setPosts]=useState([]);const[loading,setLoading]=useState(true);useEffect(()=>{const loadPosts=async()=>{const fetchedPosts=await fetchPosts();setPosts(fetchedPosts);setLoading(false);};loadPosts();},[]);if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}return/*#__PURE__*/_jsx(\"div\",{children:posts.map(post=>/*#__PURE__*/_jsx(Post,{content:post.content,author:post.title// Assuming title is the author's name\n,onLike:()=>console.log(`Liked post ${post.id}`),onComment:comment=>console.log(`Commented on post ${post.id}: ${comment}`)},post.id))});};export default Feed;","map":{"version":3,"names":["React","useEffect","useState","Post","jsx","_jsx","fetchPosts","id","title","content","Feed","posts","setPosts","loading","setLoading","loadPosts","fetchedPosts","children","map","post","author","onLike","console","log","onComment","comment"],"sources":["C:/Users/syed/AppData/Local/NewSocialMedia/social-media-app/social-media-app/src/components/Feed.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Post from './Post';\n\n\ntype PostType = {\n    id: number;\n    title: string;\n    content: string;\n    // other fields...\n};\n\nexport async function fetchPosts() {\n    // Replace with your actual API call logic\n    return [\n        { id: 1, title: 'Author 1', content: 'Post content 1' },\n        { id: 2, title: 'Author 2', content: 'Post content 2' }\n    ];\n}\n\nconst Feed: React.FC = () => {\n    const [posts, setPosts] = useState<PostType[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        const loadPosts = async () => {\n            const fetchedPosts = await fetchPosts();\n            setPosts(fetchedPosts as PostType[]);\n            setLoading(false);\n        };\n\n        loadPosts();\n    }, []);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div>\n            \n            {posts.map((post) => (\n                <Post\n                    key={post.id}\n                    content={post.content}\n                    author={post.title} // Assuming title is the author's name\n                    onLike={() => console.log(`Liked post ${post.id}`)}\n                    onComment={(comment) => console.log(`Commented on post ${post.id}: ${comment}`)}\n                />\n            ))}\n            \n        </div>\n    );\n};\n\nexport default Feed;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,IAAI,KAAM,QAAQ,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAU1B,MAAO,eAAe,CAAAC,UAAUA,CAAA,CAAG,CAC/B;AACA,MAAO,CACH,CAAEC,EAAE,CAAE,CAAC,CAAEC,KAAK,CAAE,UAAU,CAAEC,OAAO,CAAE,gBAAiB,CAAC,CACvD,CAAEF,EAAE,CAAE,CAAC,CAAEC,KAAK,CAAE,UAAU,CAAEC,OAAO,CAAE,gBAAiB,CAAC,CAC1D,CACL,CAEA,KAAM,CAAAC,IAAc,CAAGA,CAAA,GAAM,CACzB,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAa,EAAE,CAAC,CAClD,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAU,IAAI,CAAC,CAErDD,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAc,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC1B,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAV,UAAU,CAAC,CAAC,CACvCM,QAAQ,CAACI,YAA0B,CAAC,CACpCF,UAAU,CAAC,KAAK,CAAC,CACrB,CAAC,CAEDC,SAAS,CAAC,CAAC,CACf,CAAC,CAAE,EAAE,CAAC,CAEN,GAAIF,OAAO,CAAE,CACT,mBAAOR,IAAA,QAAAY,QAAA,CAAK,YAAU,CAAK,CAAC,CAChC,CAEA,mBACIZ,IAAA,QAAAY,QAAA,CAEKN,KAAK,CAACO,GAAG,CAAEC,IAAI,eACZd,IAAA,CAACF,IAAI,EAEDM,OAAO,CAAEU,IAAI,CAACV,OAAQ,CACtBW,MAAM,CAAED,IAAI,CAACX,KAAO;AAAA,CACpBa,MAAM,CAAEA,CAAA,GAAMC,OAAO,CAACC,GAAG,CAAC,cAAcJ,IAAI,CAACZ,EAAE,EAAE,CAAE,CACnDiB,SAAS,CAAGC,OAAO,EAAKH,OAAO,CAACC,GAAG,CAAC,qBAAqBJ,IAAI,CAACZ,EAAE,KAAKkB,OAAO,EAAE,CAAE,EAJ3EN,IAAI,CAACZ,EAKb,CACJ,CAAC,CAED,CAAC,CAEd,CAAC,CAED,cAAe,CAAAG,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}